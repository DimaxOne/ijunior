using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Fighters
{
    class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();
            arena.Battle();
        }
    }

    class Arena
    {
        private List<Fighters> _fighters = new List<Fighters>();

        public Arena()
        {
            _fighters.Add(new Warrior(500, 40, 50));
            _fighters.Add(new Assasin(350, 50, 15));
            _fighters.Add(new Nosferatu(400, 30, 20));
            _fighters.Add(new Archer(300, 50, 10));
            _fighters.Add(new Mage(320, 55, 10));

            for (int i = 0; i < _fighters.Count; i++)
            {
                _fighters[i].ShowInfo();
            }
        }

        public void Battle()
        {
            Fighters fighterFirst = СhoiceFighter();
            Console.WriteLine("Первый боец выбран.");

            Fighters fighterSecond = СhoiceFighter();
            Console.WriteLine("Второй боец выбран.\nБой!\n");

            if (fighterFirst.Type == fighterSecond.Type)
            {
                CreateDifferentFighter(fighterFirst);
                fighterSecond = _fighters[_fighters.Count - 1];
            }

            int round = 0;

            while (fighterFirst.Health > 0 && fighterSecond.Health > 0)
            {
                BattleOneRound(fighterFirst, fighterSecond, round);
                DetermineWinner(fighterFirst, fighterSecond);
                round++;
                System.Threading.Thread.Sleep(100);
            }   
        }

        private bool CheckPresenceFighter(string name)
        {
            bool result = false;
            for (int i = 0; i < _fighters.Count; i++)
            {
                if (_fighters[i].Type == name)
                {
                    result = true;
                }
            }

            return result;
        }

        private void DetermineWinner(Fighters fighterFirst, Fighters fighterSecond)
        {
            if (fighterFirst.Health <= 0 && fighterSecond.Health <= 0)
            {
                Console.WriteLine("Ничья.");
            }
            else if (fighterSecond.Health <= 0)
            {
                Console.WriteLine($"\n{fighterFirst.Type} победил.");
            }
            else if (fighterFirst.Health <= 0)
            {
                Console.WriteLine($"\n{fighterSecond.Type} победил.");
            }
        }
        
        //Так и не придумал как вернуть нужный мне класс без такого метода
        private void CreateDifferentFighter(Fighters fighter)
        {
            int indexFighter = GetIndexFighter(fighter.Type);

            switch (indexFighter)
            {
                case 0:
                    _fighters.Add(new Warrior(500, 40, 50));
                    break;
                case 1:
                    _fighters.Add(new Assasin(350, 50, 15));
                    break;
                case 2:
                    _fighters.Add(new Nosferatu(400, 30, 20));
                    break;
                case 3:
                    _fighters.Add(new Archer(300, 50, 10));
                    break;
                case 4:
                    _fighters.Add(new Mage(320, 55, 10));
                    break;
                default:
                    Console.WriteLine("Все пропало, боя не будет!");
                    break;
            }
        }

        private int GetIndexFighter(string name)
        {
            int i = 0;
            while (_fighters[i].Type != name)
            {
                i++;
            }

            return i;
        }

        private void BattleOneRound(Fighters fighterFirst, Fighters fighterSecond, int round)
        {
            fighterFirst.UseSkill(round, fighterSecond);
            fighterSecond.UseSkill(round, fighterSecond);

            fighterFirst.TakeDamage(fighterSecond.Damage);
            Console.WriteLine($"{fighterSecond.Type} проводит атаку. {fighterFirst.Type} имеет " +
                $"{fighterFirst.Health} жизней.");
            fighterSecond.TakeDamage(fighterFirst.Damage);
            Console.WriteLine($"{fighterFirst.Type} проводит атаку. {fighterSecond.Type} имеет " +
                $"{fighterSecond.Health} жизней.");

            fighterFirst.RestoreParameters(round);
            fighterSecond.RestoreParameters(round);
        }

        private Fighters СhoiceFighter()
        {
            bool IsRightChoice = false;
            string fighter = "";

            while (IsRightChoice != true)
            {
                Console.WriteLine("Выберите класс бойца: ");
                fighter = Console.ReadLine();
                IsRightChoice = CheckPresenceFighter(fighter);
                if(!IsRightChoice)
                {
                    Console.WriteLine("Боец выбран неправильно.");
                }
            }

            return _fighters[GetIndexFighter(fighter)];
        }
    }

    class Fighters
    {
        public string Type { get; protected set; }
        public int Health { get; protected set; }
        public int Damage { get; protected set; }
        public int Armor { get; protected set; }

        public Fighters(int health, int damage, int armor, string type)
        {
            Health = health;
            Damage = damage;
            Armor = armor;
            Type = type;
        }

        public virtual void ShowSkill()
        {
            Console.WriteLine("У меня нет способностей.");
        }

        public virtual void UseSkill(int round, Fighters fighter) { }

        public virtual void RestoreParameters(int round) { }

        public void TakeDamage(int damage)
        {
            Health -= damage * damage / (damage + Armor);
        }

        public void ShowInfo()
        {
            Console.WriteLine($"{Type} - у бойца {Health} жизней, {Damage} урона и {Armor} брони.");
            ShowSkill();
        }
    }

    class Warrior : Fighters
    {
        private int _tempArmor;

        public Warrior(int health, int damage, int armor, string type = "Воин") : base (health, damage, armor, type) { }

        public override void ShowSkill()
        {
            Console.WriteLine("Воин способен временно увеличить свою броню.\n");
        }

        public override void UseSkill(int round, Fighters fighter)
        {
            _tempArmor = Armor;

            if (round != 0 && (round % 3) == 0)
            {
                Console.WriteLine(Type + " применяет способность.");
                Armor += 20;
            }
        }

        public override void RestoreParameters(int round)
        {
            Armor = _tempArmor;
        }
    }

    class Assasin : Fighters
    {
        private int _tempDamage;
        private Random random;

        public Assasin(int health, int damage, int armor, string type = "Убийца") : base(health, damage, armor, type) 
        {
            Random rand = new Random();
            random = rand;
        }

        public override void ShowSkill()
        {
            Console.WriteLine("Убийца с определенным шансом наносит критический урон.\n");
        }

        public override void UseSkill(int round, Fighters fighter)
        {
            _tempDamage = Damage;

            if (random.Next(0, 101) < 20)
            {
                Console.WriteLine(Type + " применяет способность.");
                Damage *= 3;
            }
        }

        public override void RestoreParameters(int round)
        {
            Damage = _tempDamage;
        }
    }

    class Nosferatu : Fighters
    {
        public Nosferatu(int health, int damage, int armor, string type = "Вампир") : base(health, damage, armor, type) { }

        public override void ShowSkill()
        {
            Console.WriteLine("Вампир обладает способностью восстанавливать здоровье в зависимости от своего урона.\n");
        }

        public override void UseSkill(int round, Fighters fighter)
        {
            Health += Damage - Damage * fighter.Armor / 100;
        }
    }

    class Archer : Fighters
    {
        private int _tempHealth;

        public Archer(int health, int damage, int armor, string type = "Лучник") : base(health, damage, armor, type) { }

        public override void ShowSkill()
        {
            Console.WriteLine("Лучник может оглушить врага на короткое время.\n");
        }

        public override void UseSkill(int round, Fighters fighter)
        {
            if (round != 0 && (round % 3) == 0)
            {
                _tempHealth = Health;
                Console.WriteLine(Type + " применяет способность.");
                Armor += 20;
            } 
        }

        public override void RestoreParameters(int round)
        {
            if (round != 0 && (round % 3) == 0)
            {
                Health = _tempHealth;
                Console.WriteLine("Здоровье лучника " + Health);
            }  
        }
    }

    class Mage : Fighters
    {
        private int _tempDamage;

        public Mage(int health, int damage, int armor, string type = "Маг") : base(health, damage, armor, type) { }

        public override void ShowSkill()
        {
            Console.WriteLine("Маг может поджечь врага на определенный период.\n");
        }

        public override void UseSkill(int round, Fighters fighter)
        {
            _tempDamage = Damage;

            if (round != 0 && (round % 3) != 0)
            {
                Console.WriteLine(Type + " применяет способность.");
                Damage += 30;
            }
        }

        public override void RestoreParameters(int round)
        {
            if (round != 0 && (round % 3) != 0)
            {
                Damage = _tempDamage;
            } 
        }
    }
}
